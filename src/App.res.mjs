// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Stack from "./Stack.res.mjs";
import * as React from "react";
import * as Button from "./Button.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as JsxRuntime from "react/jsx-runtime";

function App(props) {
  var match = React.useState(function () {
        return 0;
      });
  var setCount = match[1];
  var match$1 = React.useState(function () {
        return "Idle";
      });
  var setApiState = match$1[1];
  var apiState = match$1[0];
  var text;
  switch (apiState) {
    case "Idle" :
        text = "Idle";
        break;
    case "Loading" :
        text = "Loading";
        break;
    case "Success" :
        text = "Success";
        break;
    case "Failure" :
        text = "Failure";
        break;
    
  }
  var onApiCall = function (param) {
    setApiState(function (param) {
          switch (apiState) {
            case "Idle" :
                return "Loading";
            case "Loading" :
                return "Success";
            case "Success" :
                return "Failure";
            case "Failure" :
                return "Idle";
            
          }
        });
  };
  var message = "Hello World";
  var match$2 = React.useState(function () {
        return [];
      });
  var setArr = match$2[1];
  var match$3 = React.useState(function () {
        return "";
      });
  var setVal = match$3[1];
  var val = match$3[0];
  var onInputChange = function (e) {
    var target = e.target;
    var value = target.value;
    setVal(function (param) {
          return value;
        });
  };
  var onButtonClick = function (param) {
    setArr(function (prev) {
          return Belt_Array.concat(prev, [{
                        id: prev.length.toString(),
                        value: val
                      }]);
        });
    setVal(function (param) {
          return "";
        });
  };
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsxs(Stack.make, {
                            children: [
                              JsxRuntime.jsx("p", {
                                    children: match[0].toString()
                                  }),
                              JsxRuntime.jsx(Button.make, {
                                    children: "Increment",
                                    onClick: (function (param) {
                                        setCount(function (prev) {
                                              return prev + 1 | 0;
                                            });
                                      })
                                  })
                            ],
                            className: "bg-red-300"
                          }),
                      JsxRuntime.jsx("hr", {}),
                      JsxRuntime.jsx("p", {
                            children: text
                          }),
                      JsxRuntime.jsxs(Stack.make, {
                            children: [
                              JsxRuntime.jsx(Button.make, {
                                    children: "Fetch",
                                    onClick: onApiCall
                                  }),
                              JsxRuntime.jsx("p", {
                                    children: message,
                                    className: "font-bold"
                                  })
                            ]
                          }),
                      JsxRuntime.jsx("hr", {}),
                      JsxRuntime.jsx("div", {
                            children: JsxRuntime.jsxs(Stack.make, {
                                  children: [
                                    JsxRuntime.jsxs(Stack.make, {
                                          children: [
                                            JsxRuntime.jsx("input", {
                                                  className: "border border-gray-300 rounded-md p-2",
                                                  inputMode: "text",
                                                  value: val,
                                                  onChange: onInputChange
                                                }),
                                            JsxRuntime.jsx(Button.make, {
                                                  children: "submit",
                                                  onClick: onButtonClick
                                                }),
                                            JsxRuntime.jsx("hr", {})
                                          ]
                                        }),
                                    Belt_Array.mapWithIndex(match$2[0], (function (index, item) {
                                            return JsxRuntime.jsx("p", {
                                                        children: item.value
                                                      }, index.toString());
                                          }))
                                  ]
                                }),
                            className: "bg-blue-300 p-4"
                          })
                    ],
                    className: "flex flex-col items-stretch gap-6"
                  }),
              className: "pt-10 max-w-[640px] m-auto"
            });
}

var make = App;

export {
  make ,
}
/* Stack Not a pure module */
